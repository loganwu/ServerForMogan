// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GSProtocol.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "GSProtocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Connd {
namespace Protocol {

namespace {

const ::google::protobuf::Descriptor* GSHeader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GSHeader_reflection_ = NULL;
const ::google::protobuf::Descriptor* GSBody_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GSBody_reflection_ = NULL;
const ::google::protobuf::Descriptor* GSPkg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GSPkg_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_GSProtocol_2eproto() {
  protobuf_AddDesc_GSProtocol_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "GSProtocol.proto");
  GOOGLE_CHECK(file != NULL);
  GSHeader_descriptor_ = file->message_type(0);
  static const int GSHeader_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GSHeader, packagelen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GSHeader, cmdid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GSHeader, version_),
  };
  GSHeader_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GSHeader_descriptor_,
      GSHeader::default_instance_,
      GSHeader_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GSHeader, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GSHeader, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GSHeader));
  GSBody_descriptor_ = file->message_type(1);
  static const int GSBody_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GSBody, cslogindata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GSBody, sclogindata_),
  };
  GSBody_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GSBody_descriptor_,
      GSBody::default_instance_,
      GSBody_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GSBody, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GSBody, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GSBody));
  GSPkg_descriptor_ = file->message_type(2);
  static const int GSPkg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GSPkg, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GSPkg, body_),
  };
  GSPkg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GSPkg_descriptor_,
      GSPkg::default_instance_,
      GSPkg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GSPkg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GSPkg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GSPkg));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_GSProtocol_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GSHeader_descriptor_, &GSHeader::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GSBody_descriptor_, &GSBody::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GSPkg_descriptor_, &GSPkg::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_GSProtocol_2eproto() {
  delete GSHeader::default_instance_;
  delete GSHeader_reflection_;
  delete GSBody::default_instance_;
  delete GSBody_reflection_;
  delete GSPkg::default_instance_;
  delete GSPkg_reflection_;
}

void protobuf_AddDesc_GSProtocol_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Connd::Common::protobuf_AddDesc_GScommon_2eproto();
  ::Connd::Data::protobuf_AddDesc_GSdata_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020GSProtocol.proto\022\016Connd.Protocol\032\016GSco"
    "mmon.proto\032\014GSdata.proto\">\n\010GSHeader\022\022\n\n"
    "packageLen\030\001 \002(\r\022\r\n\005cmdId\030\002 \002(\r\022\017\n\007versi"
    "on\030\003 \001(\r\"d\n\006GSBody\022,\n\013csLoginData\030\001 \001(\0132"
    "\027.Connd.Data.CSLoginData\022,\n\013scLoginData\030"
    "\002 \001(\0132\027.Connd.Data.SCLoginData\"W\n\005GSPkg\022"
    "(\n\006header\030\001 \002(\0132\030.Connd.Protocol.GSHeade"
    "r\022$\n\004body\030\002 \002(\0132\026.Connd.Protocol.GSBody", 319);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "GSProtocol.proto", &protobuf_RegisterTypes);
  GSHeader::default_instance_ = new GSHeader();
  GSBody::default_instance_ = new GSBody();
  GSPkg::default_instance_ = new GSPkg();
  GSHeader::default_instance_->InitAsDefaultInstance();
  GSBody::default_instance_->InitAsDefaultInstance();
  GSPkg::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_GSProtocol_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_GSProtocol_2eproto {
  StaticDescriptorInitializer_GSProtocol_2eproto() {
    protobuf_AddDesc_GSProtocol_2eproto();
  }
} static_descriptor_initializer_GSProtocol_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int GSHeader::kPackageLenFieldNumber;
const int GSHeader::kCmdIdFieldNumber;
const int GSHeader::kVersionFieldNumber;
#endif  // !_MSC_VER

GSHeader::GSHeader()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GSHeader::InitAsDefaultInstance() {
}

GSHeader::GSHeader(const GSHeader& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GSHeader::SharedCtor() {
  _cached_size_ = 0;
  packagelen_ = 0u;
  cmdid_ = 0u;
  version_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GSHeader::~GSHeader() {
  SharedDtor();
}

void GSHeader::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GSHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GSHeader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GSHeader_descriptor_;
}

const GSHeader& GSHeader::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSProtocol_2eproto();
  return *default_instance_;
}

GSHeader* GSHeader::default_instance_ = NULL;

GSHeader* GSHeader::New() const {
  return new GSHeader;
}

void GSHeader::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packagelen_ = 0u;
    cmdid_ = 0u;
    version_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GSHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 packageLen = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &packagelen_)));
          set_has_packagelen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cmdId;
        break;
      }

      // required uint32 cmdId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cmdId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cmdid_)));
          set_has_cmdid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_version;
        break;
      }

      // optional uint32 version = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GSHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 packageLen = 1;
  if (has_packagelen()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->packagelen(), output);
  }

  // required uint32 cmdId = 2;
  if (has_cmdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cmdid(), output);
  }

  // optional uint32 version = 3;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->version(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GSHeader::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 packageLen = 1;
  if (has_packagelen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->packagelen(), target);
  }

  // required uint32 cmdId = 2;
  if (has_cmdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cmdid(), target);
  }

  // optional uint32 version = 3;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->version(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GSHeader::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 packageLen = 1;
    if (has_packagelen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->packagelen());
    }

    // required uint32 cmdId = 2;
    if (has_cmdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cmdid());
    }

    // optional uint32 version = 3;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GSHeader::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GSHeader* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GSHeader*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GSHeader::MergeFrom(const GSHeader& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packagelen()) {
      set_packagelen(from.packagelen());
    }
    if (from.has_cmdid()) {
      set_cmdid(from.cmdid());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GSHeader::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GSHeader::CopyFrom(const GSHeader& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GSHeader::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GSHeader::Swap(GSHeader* other) {
  if (other != this) {
    std::swap(packagelen_, other->packagelen_);
    std::swap(cmdid_, other->cmdid_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GSHeader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GSHeader_descriptor_;
  metadata.reflection = GSHeader_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GSBody::kCsLoginDataFieldNumber;
const int GSBody::kScLoginDataFieldNumber;
#endif  // !_MSC_VER

GSBody::GSBody()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GSBody::InitAsDefaultInstance() {
  cslogindata_ = const_cast< ::Connd::Data::CSLoginData*>(&::Connd::Data::CSLoginData::default_instance());
  sclogindata_ = const_cast< ::Connd::Data::SCLoginData*>(&::Connd::Data::SCLoginData::default_instance());
}

GSBody::GSBody(const GSBody& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GSBody::SharedCtor() {
  _cached_size_ = 0;
  cslogindata_ = NULL;
  sclogindata_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GSBody::~GSBody() {
  SharedDtor();
}

void GSBody::SharedDtor() {
  if (this != default_instance_) {
    delete cslogindata_;
    delete sclogindata_;
  }
}

void GSBody::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GSBody::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GSBody_descriptor_;
}

const GSBody& GSBody::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSProtocol_2eproto();
  return *default_instance_;
}

GSBody* GSBody::default_instance_ = NULL;

GSBody* GSBody::New() const {
  return new GSBody;
}

void GSBody::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_cslogindata()) {
      if (cslogindata_ != NULL) cslogindata_->::Connd::Data::CSLoginData::Clear();
    }
    if (has_sclogindata()) {
      if (sclogindata_ != NULL) sclogindata_->::Connd::Data::SCLoginData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GSBody::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Connd.Data.CSLoginData csLoginData = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cslogindata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_scLoginData;
        break;
      }

      // optional .Connd.Data.SCLoginData scLoginData = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_scLoginData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sclogindata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GSBody::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Connd.Data.CSLoginData csLoginData = 1;
  if (has_cslogindata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cslogindata(), output);
  }

  // optional .Connd.Data.SCLoginData scLoginData = 2;
  if (has_sclogindata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->sclogindata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GSBody::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Connd.Data.CSLoginData csLoginData = 1;
  if (has_cslogindata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->cslogindata(), target);
  }

  // optional .Connd.Data.SCLoginData scLoginData = 2;
  if (has_sclogindata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->sclogindata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GSBody::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Connd.Data.CSLoginData csLoginData = 1;
    if (has_cslogindata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cslogindata());
    }

    // optional .Connd.Data.SCLoginData scLoginData = 2;
    if (has_sclogindata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sclogindata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GSBody::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GSBody* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GSBody*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GSBody::MergeFrom(const GSBody& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cslogindata()) {
      mutable_cslogindata()->::Connd::Data::CSLoginData::MergeFrom(from.cslogindata());
    }
    if (from.has_sclogindata()) {
      mutable_sclogindata()->::Connd::Data::SCLoginData::MergeFrom(from.sclogindata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GSBody::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GSBody::CopyFrom(const GSBody& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GSBody::IsInitialized() const {

  if (has_cslogindata()) {
    if (!this->cslogindata().IsInitialized()) return false;
  }
  if (has_sclogindata()) {
    if (!this->sclogindata().IsInitialized()) return false;
  }
  return true;
}

void GSBody::Swap(GSBody* other) {
  if (other != this) {
    std::swap(cslogindata_, other->cslogindata_);
    std::swap(sclogindata_, other->sclogindata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GSBody::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GSBody_descriptor_;
  metadata.reflection = GSBody_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GSPkg::kHeaderFieldNumber;
const int GSPkg::kBodyFieldNumber;
#endif  // !_MSC_VER

GSPkg::GSPkg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GSPkg::InitAsDefaultInstance() {
  header_ = const_cast< ::Connd::Protocol::GSHeader*>(&::Connd::Protocol::GSHeader::default_instance());
  body_ = const_cast< ::Connd::Protocol::GSBody*>(&::Connd::Protocol::GSBody::default_instance());
}

GSPkg::GSPkg(const GSPkg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GSPkg::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  body_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GSPkg::~GSPkg() {
  SharedDtor();
}

void GSPkg::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
    delete body_;
  }
}

void GSPkg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GSPkg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GSPkg_descriptor_;
}

const GSPkg& GSPkg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSProtocol_2eproto();
  return *default_instance_;
}

GSPkg* GSPkg::default_instance_ = NULL;

GSPkg* GSPkg::New() const {
  return new GSPkg;
}

void GSPkg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_header()) {
      if (header_ != NULL) header_->::Connd::Protocol::GSHeader::Clear();
    }
    if (has_body()) {
      if (body_ != NULL) body_->::Connd::Protocol::GSBody::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GSPkg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Connd.Protocol.GSHeader header = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_body;
        break;
      }

      // required .Connd.Protocol.GSBody body = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_body:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_body()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GSPkg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Connd.Protocol.GSHeader header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }

  // required .Connd.Protocol.GSBody body = 2;
  if (has_body()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->body(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GSPkg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Connd.Protocol.GSHeader header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }

  // required .Connd.Protocol.GSBody body = 2;
  if (has_body()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->body(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GSPkg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Connd.Protocol.GSHeader header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

    // required .Connd.Protocol.GSBody body = 2;
    if (has_body()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->body());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GSPkg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GSPkg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GSPkg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GSPkg::MergeFrom(const GSPkg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::Connd::Protocol::GSHeader::MergeFrom(from.header());
    }
    if (from.has_body()) {
      mutable_body()->::Connd::Protocol::GSBody::MergeFrom(from.body());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GSPkg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GSPkg::CopyFrom(const GSPkg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GSPkg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_header()) {
    if (!this->header().IsInitialized()) return false;
  }
  if (has_body()) {
    if (!this->body().IsInitialized()) return false;
  }
  return true;
}

void GSPkg::Swap(GSPkg* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(body_, other->body_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GSPkg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GSPkg_descriptor_;
  metadata.reflection = GSPkg_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol
}  // namespace Connd

// @@protoc_insertion_point(global_scope)
