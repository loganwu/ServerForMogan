import "im_common.proto";

package tencent.im.msg;

message MsgSendReq
{
    optional Msg msg = 1;
}

message MsgSendResp
{
}

message MsgRecvReq
{
    optional Msg msg = 1;
}

message MsgRecvResp
{
    optional MsgHead msg_head = 1;
}

message PullUnreadMsgReq	//拉取未读消息的请求，第一次请求时均填0，如果上一次消息还没有拉取完成，则填充上一次最后一条返回消息的序列号和时间
{
    optional uint32 msg_seq = 1;			//拉取的最后一条消息的序列号
    optional uint32 msg_time = 2;			//拉取的最后一条消息的时间
}

message PullUnreadMsgResp	//拉取未读消息的响应，其中moremsg标明了这次未读的消息是否还没有拉取完成，如果还要消息没有拉取完成，则填1.
{
    optional uint32 latest_msg_time = 1;	//用于下次拉取的时间戳
    optional uint32 more_msg = 2;			//是否还有剩余消息，需再次拉取，1-有；0-无
    optional uint32 total_msg = 3;			//离线消息总条数
    repeated Msg msgs = 4;					//包含的消息
}

message ConfirmReadMsgReq
{
    repeated MsgHead msg_heads = 1;
}

message ConfirmReadMsgResp
{
}

message Msg						//消息由消息头MsgHead和消息体MsgBody构成
{
    optional MsgHead head = 1;
    optional MsgBody body = 2;
}

message MsgHead					//消息头中包含了路由头RoutingHead和内容摘要ContentHead
{
    optional RoutingHead routing_head = 1;
    optional ContentHead content_head = 2;
}

message RoutingHead				//C2C GROUP表示的普通好友消息和群消息
{
    optional C2C c2c = 1;
    optional Group group = 2;
}

message C2C
{
    optional common.User sender = 1;			//发送方的信息
    optional common.User receiver = 2;			//接收方的信息
    optional C2CRelation c2c_relation = 3;		//发送方和接收方的关系
}

message C2CRelation
{
    optional common.C2CType c2c_type = 1;	//好友关系
    optional common.GroupInfo group_info= 2;	//在同一个群
    optional common.Token token = 3;		//用于验证非好友关系的签名，业务方可以不用关注
}

message Group
{
    optional common.User sender = 1;
    optional common.User receiver = 2;
    optional common.GroupInfo group_info = 3;
}

message ContentHead
{
    optional uint32 pkg_num = 1 [default = 1];	//一共几个分包（如果需要分包发送）
    optional uint32 pkg_index = 2;				//当前分包索引
    optional uint32 seq = 3;					//消息序列号，唯一标识一条消息，可以用来去重
    optional uint32 date_time = 4;				//发送消息的时间
    optional MsgType msg_type = 5 [default = MSG_TEXT];   //区分文本，信令等
}

enum MsgType
{
    MSG_TEXT = 0;	//可读消息
}

message MsgBody
{
    optional RichText rich_text = 1;		//可读消息
    //TODO   
}

message RichText			//消息的正文描述，由消息的字体相关属性attr和消息的内容元素elem组成
{
    optional Attr attr = 1;		//消息的字体，颜色，大小等相关属性
    repeated Elem elems = 2;	//消息的种类，包括文本消息，系统表情消息
}

message Attr
{
    optional sint32 code_page = 1 [default = -1];
    optional uint32 time = 2 [default = 1];
    optional uint32 random = 3;					//随机数，用来消息的去重判断
    optional uint32 color = 4;
    optional uint32 size = 5 [default = 10];
    optional uint32 effect = 6 [default = 7];
    optional uint32 char_set = 7 [default = 0x4e];
    optional uint32 pitch_and_family = 8 [default = 0x5a];
    optional string font_name = 9 [default = "Times New Roman"];
}

message Elem
{
    optional Text text = 1;		//文本消息
    optional Face face = 2;		//系统表情消息
    //optional Image image = 3;
}

message Text
{
    optional bytes str = 1;		//文本内容
    optional string link = 2;		//超链接
}

message Face
{
    optional uint32 index = 1;		//系统表情索引号
    optional bytes old = 2;		//老格式的系统表情数据
}

//message Image
//{
//    optional string url = 1;		//url
//}


