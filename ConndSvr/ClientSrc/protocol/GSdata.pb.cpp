// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GSdata.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "GSdata.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Connd {
namespace Data {

namespace {

const ::google::protobuf::Descriptor* CSLoginData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSLoginData_reflection_ = NULL;
const ::google::protobuf::Descriptor* SCLoginData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SCLoginData_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_GSdata_2eproto() {
  protobuf_AddDesc_GSdata_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "GSdata.proto");
  GOOGLE_CHECK(file != NULL);
  CSLoginData_descriptor_ = file->message_type(0);
  static const int CSLoginData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSLoginData, user_),
  };
  CSLoginData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSLoginData_descriptor_,
      CSLoginData::default_instance_,
      CSLoginData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSLoginData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSLoginData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSLoginData));
  SCLoginData_descriptor_ = file->message_type(1);
  static const int SCLoginData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCLoginData, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCLoginData, ret_),
  };
  SCLoginData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SCLoginData_descriptor_,
      SCLoginData::default_instance_,
      SCLoginData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCLoginData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCLoginData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SCLoginData));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_GSdata_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSLoginData_descriptor_, &CSLoginData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SCLoginData_descriptor_, &SCLoginData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_GSdata_2eproto() {
  delete CSLoginData::default_instance_;
  delete CSLoginData_reflection_;
  delete SCLoginData::default_instance_;
  delete SCLoginData_reflection_;
}

void protobuf_AddDesc_GSdata_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Connd::Common::protobuf_AddDesc_GScommon_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014GSdata.proto\022\nConnd.Data\032\016GScommon.pro"
    "to\"/\n\013CSLoginData\022 \n\004user\030\001 \002(\0132\022.Connd."
    "Common.User\"<\n\013SCLoginData\022 \n\004user\030\001 \002(\013"
    "2\022.Connd.Common.User\022\013\n\003ret\030\002 \002(\005", 153);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "GSdata.proto", &protobuf_RegisterTypes);
  CSLoginData::default_instance_ = new CSLoginData();
  SCLoginData::default_instance_ = new SCLoginData();
  CSLoginData::default_instance_->InitAsDefaultInstance();
  SCLoginData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_GSdata_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_GSdata_2eproto {
  StaticDescriptorInitializer_GSdata_2eproto() {
    protobuf_AddDesc_GSdata_2eproto();
  }
} static_descriptor_initializer_GSdata_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CSLoginData::kUserFieldNumber;
#endif  // !_MSC_VER

CSLoginData::CSLoginData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSLoginData::InitAsDefaultInstance() {
  user_ = const_cast< ::Connd::Common::User*>(&::Connd::Common::User::default_instance());
}

CSLoginData::CSLoginData(const CSLoginData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSLoginData::SharedCtor() {
  _cached_size_ = 0;
  user_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSLoginData::~CSLoginData() {
  SharedDtor();
}

void CSLoginData::SharedDtor() {
  if (this != default_instance_) {
    delete user_;
  }
}

void CSLoginData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSLoginData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSLoginData_descriptor_;
}

const CSLoginData& CSLoginData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSdata_2eproto();
  return *default_instance_;
}

CSLoginData* CSLoginData::default_instance_ = NULL;

CSLoginData* CSLoginData::New() const {
  return new CSLoginData;
}

void CSLoginData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_user()) {
      if (user_ != NULL) user_->::Connd::Common::User::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSLoginData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Connd.Common.User user = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSLoginData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Connd.Common.User user = 1;
  if (has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->user(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSLoginData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Connd.Common.User user = 1;
  if (has_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->user(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSLoginData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Connd.Common.User user = 1;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSLoginData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSLoginData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSLoginData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSLoginData::MergeFrom(const CSLoginData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user()) {
      mutable_user()->::Connd::Common::User::MergeFrom(from.user());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSLoginData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSLoginData::CopyFrom(const CSLoginData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSLoginData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_user()) {
    if (!this->user().IsInitialized()) return false;
  }
  return true;
}

void CSLoginData::Swap(CSLoginData* other) {
  if (other != this) {
    std::swap(user_, other->user_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSLoginData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSLoginData_descriptor_;
  metadata.reflection = CSLoginData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SCLoginData::kUserFieldNumber;
const int SCLoginData::kRetFieldNumber;
#endif  // !_MSC_VER

SCLoginData::SCLoginData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SCLoginData::InitAsDefaultInstance() {
  user_ = const_cast< ::Connd::Common::User*>(&::Connd::Common::User::default_instance());
}

SCLoginData::SCLoginData(const SCLoginData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SCLoginData::SharedCtor() {
  _cached_size_ = 0;
  user_ = NULL;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SCLoginData::~SCLoginData() {
  SharedDtor();
}

void SCLoginData::SharedDtor() {
  if (this != default_instance_) {
    delete user_;
  }
}

void SCLoginData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SCLoginData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SCLoginData_descriptor_;
}

const SCLoginData& SCLoginData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSdata_2eproto();
  return *default_instance_;
}

SCLoginData* SCLoginData::default_instance_ = NULL;

SCLoginData* SCLoginData::New() const {
  return new SCLoginData;
}

void SCLoginData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_user()) {
      if (user_ != NULL) user_->::Connd::Common::User::Clear();
    }
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SCLoginData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Connd.Common.User user = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // required int32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SCLoginData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Connd.Common.User user = 1;
  if (has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->user(), output);
  }

  // required int32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SCLoginData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Connd.Common.User user = 1;
  if (has_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->user(), target);
  }

  // required int32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SCLoginData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Connd.Common.User user = 1;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user());
    }

    // required int32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SCLoginData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SCLoginData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SCLoginData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SCLoginData::MergeFrom(const SCLoginData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user()) {
      mutable_user()->::Connd::Common::User::MergeFrom(from.user());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SCLoginData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCLoginData::CopyFrom(const SCLoginData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCLoginData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_user()) {
    if (!this->user().IsInitialized()) return false;
  }
  return true;
}

void SCLoginData::Swap(SCLoginData* other) {
  if (other != this) {
    std::swap(user_, other->user_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SCLoginData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SCLoginData_descriptor_;
  metadata.reflection = SCLoginData_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Data
}  // namespace Connd

// @@protoc_insertion_point(global_scope)
