// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GSdata.proto

#ifndef PROTOBUF_GSdata_2eproto__INCLUDED
#define PROTOBUF_GSdata_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "GScommon.pb.h"
// @@protoc_insertion_point(includes)

namespace Connd {
namespace Data {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_GSdata_2eproto();
void protobuf_AssignDesc_GSdata_2eproto();
void protobuf_ShutdownFile_GSdata_2eproto();

class CSLoginData;
class SCLoginData;

// ===================================================================

class CSLoginData : public ::google::protobuf::Message {
 public:
  CSLoginData();
  virtual ~CSLoginData();

  CSLoginData(const CSLoginData& from);

  inline CSLoginData& operator=(const CSLoginData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSLoginData& default_instance();

  void Swap(CSLoginData* other);

  // implements Message ----------------------------------------------

  CSLoginData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSLoginData& from);
  void MergeFrom(const CSLoginData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Connd.Common.User user = 1;
  inline bool has_user() const;
  inline void clear_user();
  static const int kUserFieldNumber = 1;
  inline const ::Connd::Common::User& user() const;
  inline ::Connd::Common::User* mutable_user();
  inline ::Connd::Common::User* release_user();
  inline void set_allocated_user(::Connd::Common::User* user);

  // @@protoc_insertion_point(class_scope:Connd.Data.CSLoginData)
 private:
  inline void set_has_user();
  inline void clear_has_user();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::Connd::Common::User* user_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_GSdata_2eproto();
  friend void protobuf_AssignDesc_GSdata_2eproto();
  friend void protobuf_ShutdownFile_GSdata_2eproto();

  void InitAsDefaultInstance();
  static CSLoginData* default_instance_;
};
// -------------------------------------------------------------------

class SCLoginData : public ::google::protobuf::Message {
 public:
  SCLoginData();
  virtual ~SCLoginData();

  SCLoginData(const SCLoginData& from);

  inline SCLoginData& operator=(const SCLoginData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SCLoginData& default_instance();

  void Swap(SCLoginData* other);

  // implements Message ----------------------------------------------

  SCLoginData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SCLoginData& from);
  void MergeFrom(const SCLoginData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Connd.Common.User user = 1;
  inline bool has_user() const;
  inline void clear_user();
  static const int kUserFieldNumber = 1;
  inline const ::Connd::Common::User& user() const;
  inline ::Connd::Common::User* mutable_user();
  inline ::Connd::Common::User* release_user();
  inline void set_allocated_user(::Connd::Common::User* user);

  // required int32 ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Connd.Data.SCLoginData)
 private:
  inline void set_has_user();
  inline void clear_has_user();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::Connd::Common::User* user_;
  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_GSdata_2eproto();
  friend void protobuf_AssignDesc_GSdata_2eproto();
  friend void protobuf_ShutdownFile_GSdata_2eproto();

  void InitAsDefaultInstance();
  static SCLoginData* default_instance_;
};
// ===================================================================


// ===================================================================

// CSLoginData

// required .Connd.Common.User user = 1;
inline bool CSLoginData::has_user() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSLoginData::set_has_user() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSLoginData::clear_has_user() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSLoginData::clear_user() {
  if (user_ != NULL) user_->::Connd::Common::User::Clear();
  clear_has_user();
}
inline const ::Connd::Common::User& CSLoginData::user() const {
  return user_ != NULL ? *user_ : *default_instance_->user_;
}
inline ::Connd::Common::User* CSLoginData::mutable_user() {
  set_has_user();
  if (user_ == NULL) user_ = new ::Connd::Common::User;
  return user_;
}
inline ::Connd::Common::User* CSLoginData::release_user() {
  clear_has_user();
  ::Connd::Common::User* temp = user_;
  user_ = NULL;
  return temp;
}
inline void CSLoginData::set_allocated_user(::Connd::Common::User* user) {
  delete user_;
  user_ = user;
  if (user) {
    set_has_user();
  } else {
    clear_has_user();
  }
}

// -------------------------------------------------------------------

// SCLoginData

// required .Connd.Common.User user = 1;
inline bool SCLoginData::has_user() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SCLoginData::set_has_user() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SCLoginData::clear_has_user() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SCLoginData::clear_user() {
  if (user_ != NULL) user_->::Connd::Common::User::Clear();
  clear_has_user();
}
inline const ::Connd::Common::User& SCLoginData::user() const {
  return user_ != NULL ? *user_ : *default_instance_->user_;
}
inline ::Connd::Common::User* SCLoginData::mutable_user() {
  set_has_user();
  if (user_ == NULL) user_ = new ::Connd::Common::User;
  return user_;
}
inline ::Connd::Common::User* SCLoginData::release_user() {
  clear_has_user();
  ::Connd::Common::User* temp = user_;
  user_ = NULL;
  return temp;
}
inline void SCLoginData::set_allocated_user(::Connd::Common::User* user) {
  delete user_;
  user_ = user;
  if (user) {
    set_has_user();
  } else {
    clear_has_user();
  }
}

// required int32 ret = 2;
inline bool SCLoginData::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SCLoginData::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SCLoginData::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SCLoginData::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 SCLoginData::ret() const {
  return ret_;
}
inline void SCLoginData::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Data
}  // namespace Connd

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_GSdata_2eproto__INCLUDED
